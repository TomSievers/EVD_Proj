@startuml
package TrajectoryCalculator {
    
    class Line <<struct>> {
        + pt1 : cv::Point
        + pt2 : cv::Point
    }

    interface ITrajectory{
     # tableCorners : std::array<cv::Point,4>
     # ballLocations : std::vector<<cv::Point>>
     # cuePoints: std::array<cv::Point,2>
     # ballRadius: uint16_t
     # pocketRadius: uint16_t
     
     + //setTable(corners : std::array<cv::Point,4>&) : void//
     + //setBalls(balls : std::vector<cv::Point>&) : void//
     + //setCue(cue : std::array<cv::Point,2>&) : void//
     + //setPocketRadius(radius: uint16_t) : void
     + //setBallRadius(radius: uint16_t) : void//
     + //getTrajectory() : std::vector<cv::Point>//
    }
    
    class TrajectoryCalculator{
      - invertAngle(angle : float): float
      - ptToAngle(pt1 : cv::Point&, pt2 : cv::Point&) : float
      - euclideanDistance(pt1 : cv::Point&, pt2: cv::Point&) : uint32_t
      - predictPoint(pt: cv::Point&, angle: float&, distance: uint32_t) : uint8_t
      - lineCircleIntersection(line: Line&, circle : cv::Point&, circleRadius: uint16_t): std::vector<cv::Point>
      - linePointDistance(pnt1: cv::Point&, pnt1: cv::Point&, pnt: cv::Point&) : uint32_t
      + nextPoint(start: cv::Point, angle: float, hitBalls: cv::vector<Point>, flag: uint8_t)
    }

}

ITrajectory <|. TrajectoryCalculator
TrajectoryCalculator <-- Line
@enduml