@startuml

package Detector
{
    interface IDetector
    {
        + IDetector(cap : std::shared_ptr<Acquisition>)
        + //getObjects() : std::vector<std::shared_ptr<Object>>//

        # processors : std::vector<std::shared_ptr<IImageProcessing>>
    }
}

package AidController
{
    enum DetectorType
    {
        BOUNDARY
        CUE
        BALL
    }

    class Controller
    {
        - detectors : std::map<DetectorType, IDetector>
        - globalAcquisition : std::shared_ptr<Acquisition>
        - UI : <unknown>
        - trajectoryCalc : std::shared_ptr<ITrajectory>
        - visualizer : std::shared_ptr<IVisual>
        + getDetector(detector : DetectorType) : std::shared_ptr<IDetector>
        + getTrajectoryCalculator() : std::shared_ptr<ITrajectory>
        + getVisualizer() : std::shared_ptr<IVisual>
    }

    interface IState
    {
        + //onEntry(controller : Controller&)//
        + //onDo(controller : Controller&)//
        + //onExit(controller : Controller&)//
        + //handleEvent(event : Event&)//
    }

    interface ISubState

    class Waiting

    class Detecting

    class Setup
    {

    }

    class Active
    {
        
    }

    class Inactive
    {
        
    }

    class Calibrate
    {
        
    }

    enum Event
    {
        START
        STOP
        CALIBRATE
    }

    class Context
    {
        - events : std::queue<Event>
        - curState : std::shared_ptr<IState>
        - history : std::shared_ptr<IState>
        + scheduleEvent(event : Event&) : void
        + run() : void
    }
}

Context <|-- Controller
Context --> IState
Context .> Event

IState <|.. Setup
IState <|.. Active
IState <|.. Inactive
IState <|.. Calibrate

Setup -[hidden]> Inactive
Inactive -[hidden]> Calibrate
Calibrate -[hidden]> Active

Active -> ISubState 

IState <|-- ISubState
ISubState <|.. Waiting
ISubState <|.. Detecting


@enduml