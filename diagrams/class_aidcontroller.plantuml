@startuml

package Detector
{
    interface IDetector
    {
        + IDetector(cap : std::shared_ptr<Acquisition>)
        + //getObjects() : std::vector<std::shared_ptr<Object>>//

        # processors : std::vector<std::shared_ptr<IImageProcessing>>
    }
}

package Visualizer
{
    interface IVisual
    {
        + update(ball : const CueBall&, trajectories : const Trajectories&) : void
    }
}

package TrajectoryCalculator {

    interface ITrajectory{
        # tableCorners : std::array<cv::Point,4>
        # ballLocations : std::vector<<cv::Point>>
        # cuePoints: std::array<cv::Point,2>
        # ballRadius: uint16_t
        # pocketRadius: uint16_t
        
        + //setTable(corners : std::array<cv::Point,4>&) : void//
        + //setBalls(balls : std::vector<cv::Point>&) : void//
        + //setCue(cue : std::array<cv::Point,2>&) : void//
        + //setPocketRadius(radius: uint16_t) : void//
        + //setBallRadius(radius: uint16_t) : void//
        + //getTrajectory() : std::vector<cv::Point>//
    }
}

package AidController
{
    enum DetectorType
    {
        BOUNDARY
        CUE
        BALL
    }

    class Controller
    {
        - detectors : std::map<DetectorType, IDetector>
        - globalAcquisition : std::shared_ptr<Acquisition>
        - UI : <unknown>
        - trajectoryCalc : std::shared_ptr<ITrajectory>
        - visualizer : std::shared_ptr<IVisual>
        + getDetector(detector : DetectorType) : std::shared_ptr<IDetector>
        + getTrajectoryCalculator() : std::shared_ptr<ITrajectory>
        + getVisualizer() : std::shared_ptr<IVisual>
    }

    interface IState
    {
        + //onEntry(controller : Controller&)//
        + //onDo(controller : Controller&)//
        + //onExit(controller : Controller&)//
        + //handleEvent(event : Event&)//
    }

    interface IActiveSubState

    class Waiting

    class Detecting

    class Setup

    class Active

    class Inactive

    class Calibrate

    class Event <<struct>>

    enum UIEvent
    {
        NONE
        START
        STOP
        CALIBRATE
    }

    enum DetectorEvent
    {
        STEADY
        MOVING
    }

    class Context
    {
        - events : std::queue<Event>
        - curState : std::shared_ptr<IState>
        - history : std::shared_ptr<IState>
        + scheduleEvent(event : Event&) : void
        + run() : void
    }
}

ITrajectory <- Controller
IVisual <-- Controller
IDetector <.. Controller
Controller ..> DetectorType
Controller -|> Context
Context --> IState
Context .> Event

IState <|.. Setup
IState <|.. Active
IState <|.. Inactive
IState <|.. Calibrate

Setup -[hidden]> Inactive
Inactive -[hidden]> Calibrate
Calibrate -[hidden]> Active

Active -> IActiveSubState 

IState <|-- IActiveSubState
IActiveSubState <|.. Waiting
IActiveSubState <|.. Detecting

Event --> "+ ui" UIEvent
Event --> "+ detect" DetectorEvent


@enduml